/*
 * TileType.cpp
 *
 *  Created on: Mar 23, 2010
 *      Author: alienjon
 */
#include "TileType.hpp"

using std::string;

const string TILETYPE_FLOOR_A = "FLOOR_A";
const string TILETYPE_FLOOR_B = "FLOOR_B";
const string TILETYPE_FLOOR_C = "FLOOR_C";
const string TILETYPE_FLOOR_D = "FLOOR_D";
const string TILETYPE_WEST = "WEST";
const string TILETYPE_NORTH = "NORTH";
const string TILETYPE_EAST = "EAST";
const string TILETYPE_SOUTH = "SOUTH";
const string TILETYPE_CORNER_NORTHWEST = "CORNER_NORTHWEST";
const string TILETYPE_CORNER_NORTHEAST = "CORNER_NORTHEAST";
const string TILETYPE_CORNER_SOUTHEAST = "CORNER_SOUTHEAST";
const string TILETYPE_CORNER_SOUTHWEST = "CORNER_SOUTHWEST";
const string TILETYPE_NORTHWEST = "NORTHWEST";
const string TILETYPE_NORTHEAST = "NORTHEAST";
const string TILETYPE_SOUTHEAST = "SOUTHEAST";
const string TILETYPE_SOUTHWEST = "SOUTHWEST";
const string TILETYPE_CORNER_WEST = "CORNER_WEST";
const string TILETYPE_CORNER_NORTH = "CORNER_NORTH";
const string TILETYPE_CORNER_EAST = "CORNER_EAST";
const string TILETYPE_CORNER_SOUTH = "CORNER_SOUTH";
const string TILETYPE_NORTHWEST_DOORLEFT = "NORTHWEST_DOORLEFT";
const string TILETYPE_NORTHWEST_DOORRIGHT = "NORTHWEST_DOORRIGHT";
const string TILETYPE_NORTHEAST_DOORLEFT = "NORTHEAST_DOORLEFT";
const string TILETYPE_NORTHEAST_DOORRIGHT = "NORTHEAST_DOORRIGHT";
const string TILETYPE_SOUTHEAST_DOORLEFT = "SOUTHEAST_DOORLEFT";
const string TILETYPE_SOUTHEAST_DOORRIGHT = "SOUTHEAST_DOORRIGHT";
const string TILETYPE_SOUTHWEST_DOORLEFT = "SOUTHWEST_DOORLEFT";
const string TILETYPE_SOUTHWEST_DOORRIGHT = "SOUTHWEST_DOORRIGHT";
const string TILETYPE_NULL = "NULL";

TileType toTileType(const std::string& type)
{
	if(type == TILETYPE_WEST)
	{
		return TILE_WEST;
	}
	else if(type == TILETYPE_NORTH)
	{
		return TILE_NORTH;
	}
	else if(type == TILETYPE_EAST)
	{
		return TILE_EAST;
	}
	else if(type == TILETYPE_SOUTH)
	{
		return TILE_SOUTH;
	}
	else if(type == TILETYPE_CORNER_NORTHWEST)
	{
		return TILE_CORNER_NORTHWEST;
	}
	else if(type == TILETYPE_CORNER_NORTHEAST)
	{
		return TILE_CORNER_NORTHEAST;
	}
	else if(type == TILETYPE_CORNER_SOUTHWEST)
	{
		return TILE_CORNER_SOUTHWEST;
	}
	else if(type == TILETYPE_CORNER_SOUTHEAST)
	{
		return TILE_CORNER_SOUTHEAST;
	}
	else if(type == TILETYPE_NORTHWEST)
	{
		return TILE_NORTHWEST;
	}
	else if(type == TILETYPE_NORTHEAST)
	{
		return TILE_NORTHEAST;
	}
	else if(type == TILETYPE_SOUTHWEST)
	{
		return TILE_SOUTHWEST;
	}
	else if(type == TILETYPE_SOUTHEAST)
	{
		return TILE_SOUTHEAST;
	}
	else if(type == TILETYPE_CORNER_WEST)
	{
		return TILE_CORNER_WEST;
	}
	else if(type == TILETYPE_CORNER_NORTH)
	{
		return TILE_CORNER_NORTH;
	}
	else if(type == TILETYPE_CORNER_EAST)
	{
		return TILE_CORNER_EAST;
	}
	else if(type == TILETYPE_CORNER_SOUTH)
	{
		return TILE_CORNER_SOUTH;
	}
	else if(type == TILETYPE_NORTHWEST_DOORLEFT)
	{
		return TILE_NORTHWEST_DOORLEFT;
	}
	else if(type == TILETYPE_NORTHWEST_DOORRIGHT)
	{
		return TILE_NORTHWEST_DOORRIGHT;
	}
	else if(type == TILETYPE_NORTHEAST_DOORLEFT)
	{
		return TILE_NORTHEAST_DOORLEFT;
	}
	else if(type == TILETYPE_NORTHEAST_DOORRIGHT)
	{
		return TILE_NORTHEAST_DOORRIGHT;
	}
	else if(type == TILETYPE_SOUTHEAST_DOORLEFT)
	{
		return TILE_SOUTHEAST_DOORLEFT;
	}
	else if(type == TILETYPE_SOUTHEAST_DOORRIGHT)
	{
		return TILE_SOUTHEAST_DOORRIGHT;
	}
	else if(type == TILETYPE_SOUTHWEST_DOORLEFT)
	{
		return TILE_SOUTHWEST_DOORLEFT;
	}
	else if(type == TILETYPE_SOUTHWEST_DOORRIGHT)
	{
		return TILE_SOUTHWEST_DOORRIGHT;
	}
	else if(type == TILETYPE_FLOOR_A)
	{
		return TILE_FLOOR_A;
	}
	else if(type == TILETYPE_FLOOR_B)
	{
		return TILE_FLOOR_B;
	}
	else if(type == TILETYPE_FLOOR_C)
	{
		return TILE_FLOOR_C;
	}
	else if(type == TILETYPE_FLOOR_D)
	{
		return TILE_FLOOR_D;
	}
	else
	{
		return TILE_NULL;
	}
}

const std::string& toTileType(TileType type)
{
	switch(type)
	{
		case TILE_WEST: return TILETYPE_WEST;
		case TILE_NORTH: return TILETYPE_NORTH;
		case TILE_EAST: return TILETYPE_EAST;
		case TILE_SOUTH: return TILETYPE_SOUTH;
		case TILE_CORNER_NORTHWEST: return TILETYPE_CORNER_NORTHWEST;
		case TILE_CORNER_NORTHEAST: return TILETYPE_CORNER_NORTHEAST;
		case TILE_CORNER_SOUTHEAST: return TILETYPE_CORNER_SOUTHEAST;
		case TILE_CORNER_SOUTHWEST: return TILETYPE_CORNER_SOUTHWEST;
		case TILE_NORTHWEST: return TILETYPE_NORTHWEST;
		case TILE_NORTHEAST: return TILETYPE_NORTHEAST;
		case TILE_SOUTHEAST: return TILETYPE_SOUTHEAST;
		case TILE_SOUTHWEST: return TILETYPE_SOUTHWEST;
		case TILE_CORNER_WEST: return TILETYPE_CORNER_WEST;
		case TILE_CORNER_NORTH: return TILETYPE_CORNER_NORTH;
		case TILE_CORNER_EAST: return TILETYPE_CORNER_EAST;
		case TILE_CORNER_SOUTH: return TILETYPE_CORNER_SOUTH;
		case TILE_NORTHWEST_DOORLEFT: return TILETYPE_NORTHWEST_DOORLEFT;
		case TILE_NORTHWEST_DOORRIGHT: return TILETYPE_NORTHWEST_DOORRIGHT;
		case TILE_NORTHEAST_DOORLEFT: return TILETYPE_NORTHEAST_DOORLEFT;
		case TILE_NORTHEAST_DOORRIGHT: return TILETYPE_NORTHEAST_DOORRIGHT;
		case TILE_SOUTHEAST_DOORLEFT: return TILETYPE_SOUTHEAST_DOORLEFT;
		case TILE_SOUTHEAST_DOORRIGHT: return TILETYPE_SOUTHEAST_DOORRIGHT;
		case TILE_SOUTHWEST_DOORLEFT: return TILETYPE_SOUTHWEST_DOORLEFT;
		case TILE_SOUTHWEST_DOORRIGHT: return TILETYPE_SOUTHWEST_DOORRIGHT;
		case TILE_FLOOR_A: return TILETYPE_FLOOR_A;
		case TILE_FLOOR_B: return TILETYPE_FLOOR_B;
		case TILE_FLOOR_C: return TILETYPE_FLOOR_C;
		case TILE_FLOOR_D: return TILETYPE_FLOOR_D;
		default: return TILETYPE_NULL;
	}
}
