Key Terms
---------
User - The actual person playing the game
Player - The main character - the user's in-game self.
Enemy - Generic term for any bad-guy the player comes across
Zombie - A specific enemy that wanders around aimlessly and attacks the player on sight
Trap - A generic term for an in-game object that the player can interact with that produces some effect (usually to damage an enemy)

Basic Gameplay
--------------
The user's goal is to move the player around the level from whatever point the player starts at to an ending point. A level is a
randomly generated mapped out area(SEE 'Levels') that consists of a pattern of walls and obstacles that form rooms and hallways (for
example).  Spread throughout each level are both enemies (SEE 'Enemies') and traps (SEE 'Traps').  Some areas of the level will be
'well lit', in that the user can see everything within their line of sight(SEE 'The Problem with Lighting'), but a substantial
portion of gameplay will be played 'in the dark', where the player must find/use a flashlight to navigate the level.  The game is
viewed from an isometric angle, so the camera (SEE 'Camera') is not directly above the scene, but rather at an angle.  Controls are
simple and only need the four directionals (up, down, left and right) but are able to move the player in all cardinal directions
(up, upleft, upright, left, right, downleft, downright, down) (SEE 'Controls').  A single button will be used to perform other
actions, such as opening doors or activating traps (SEE 'Controls').

Controls
--------
Basic controls are as follows:
Directional buttons (arrow keys) - move in that direction
Spacebar - Action key
f - Flashlight key

The player moves when the user presses and holds a directional key.  As only basic directions are provided, combinations are also
used to move the player.  By this, I mean that if the user holds the left arrow key then the player moves left.  If the user, then
presses the up key in addition to the left key, the player now moves up, left.  In this manner each button should be weighed so that
direct opposites cancel each other out - if the user, having pressed the up and left keys, now presses the right key (which is,
of course, directly opposite the left key) then the left and right directionals cancel out and the player moves upwards only.

When the buttons are let go, the player should still be facing whatever direction was lasted used.

If the user presses the action key then the player 'acts' in whatever way is appropriate.  First and foremost, if there is nothing
in front of the player (or if nothing that can be acted upon is in front of the player) then the player doesn't do anything.  If,
however, upon pressing the action button there is an interactable object in front of the player (not a 1px distance, but maybe
5-10px) then the player interacts with that object based on whatever that object is (uses a trap, pushes an enemy, etc...)

Camera
------
The camera displays whatever is on the screen.  It should be a means to show the current level, the player as well as any
calculations needed for drawing (what areas are lit).  Additionally, the camera acts as a 'top level widget' where GUI objects
can be displayed.  Framerate display, menus and in-game GUI objects are shown through the camera.

Enemies
-------
A basic enemy is a creature that naturally wanders around the environment or otherwise follows a scripted set of routines (such
as to walk to a certain spot if the player moves into a certain area).  By default an enemy will be searching for the player to
attack.  This can be disabled for scripted things.  An enemy spots the player if the player lays within the 'search area' of
the enemy.  This search area is defined by a search distance and span.  The search distance is simply the point farthest in
front of the enemy that is being used to search.  The search span is the width of that distance (so the search area is either
a triangle (of sorts) or an area of a circle (called a sector).  This area is clipped by walls but not by objects or other
enemies.  Therefore, if the player is standing around the corner of a hallway from the enemy, then the enemy cannot see the
player (as a wall is blocking the player).  If, however, the player is on the opposite side of an obstacle (like a chair)
from the enemy, then the enemy will spot the player.  Enemy's can move through any open environment but cannot open doors
and will *likely not walk into traps.  Enemies have a certain amount of health which, as with the player, if they run out of
they will die as well (as the player doesn't directly perform damage against enemies, this will likely be as a result of a trap
of some sort)

* Normally an enemy will not walk into a trap by itself (it could be pushed into a trap by the player, on the other hand) but
depending on the intelligence of the enemy there is a chance that they could walk into a trap themselves, triggering whatever
effects it produces (for example, the enemy may walk into a 'pit' by themselves, but normally will avoid it as if it were a
wall or obstacle)


Levels
------
Levels (or areas or maps) should be defined by a set width and height and can be explained by a simple alpha-numeric string
algorithm.  Levels are generated randomly when the game is first started and stored (as the alpha-numeric string) when the game
is saved.  Each individual level follows certain rules based on its tileset (for example, if it is in an office building, then
the rules would include areas for offices, cubicles, windows, desks, etc...)  This layout is what is stored in the alpha-numeric
string.  Each level also defines enemy and trap placement.  When the game is saved the current (not initial) position and states
of enemies and traps are saved.  The player can move from one level to the next and back, if they so desire.

Traps
-----
Traps can fall into two categories:
Player-Activated traps - Traps that the player has to interact with for them to trip (activate)
Area-Activated traps - Traps that are activated when either a specific creature (such as the player) or any creature moves into a
certain area.

Traps are essentially scripted events that are triggered in one of the two ways mentioned above.  They should be simple in nature
in that a single event (stepping into an area or if the player activates an object) performs another single action.  These events
can be chained, however, so interacting with a first trap activates a first event which, in turn, can activate a second trap
to activate a second event, etc...

The Problem with Lighting
-------------------------
(Describe the problem with how I want to use a 'flashlight' to light up in front of the player without showing things that 'dont
make sense' - such as the inside of a room that the player cannot see into, also how enemies might be able to detect the player
based on if the area is lit)

Saving/Loading
--------------